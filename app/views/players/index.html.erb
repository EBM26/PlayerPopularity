<div class="pure-g">
  <div class="pure-u-1-5" id='sidebar'>
    <h2> SEARCH</h2>
  <%= form_for @people, html:{:class => "form"} do |x| %>
  <%= x.text_field :hi, class: 'inputbox'%>
  <% end %>
   <%= button_to 'GO', players_path, :class =>'button'%> 
   <h1 id='leader'> LEADERS </h1>
   <ul id= "leaders">
      <!-- Displaying the current top 5 players in terms of current mentions -->
      <li><%= link_to "#{@player1.first}<br />#{@player1.last}".html_safe, player_path(@player.last.id), :class => "link" %> </li>
      <li class='score'> Current Score: <%= ((@player.last.current_mentions/(@totalmentions.last.total_mentions+1).to_f)*1000).round(2)%></li>
      <li><%= link_to "#{@player2.first}<br />#{@player2.last}".html_safe, player_path(@player[-2].id), :class => "link" %></li>
      <li class='score'> Current Score: <%= ((@player[-2].current_mentions/(@totalmentions.last.total_mentions+1).to_f)*1000).round(2) %></li>
      <li><%= link_to "#{@player3.first}<br />#{@player3.last}".html_safe, player_path(@player[-3].id), :class => "link" %></li>
      <li class='score'> Current Score: <%= ((@player[-3].current_mentions/(@totalmentions.last.total_mentions+1).to_f)*1000).round(2) %></li>
      <li><%= link_to "#{@player4.first}<br />#{@player4.last}".html_safe, player_path(@player[-4].id), :class => "link" %></li>
      <li class='score'> Current Score: <%= ((@player[-4].current_mentions/(@totalmentions.last.total_mentions+1).to_f)*1000).round(2) %></li>
      <li><%= link_to "#{@player5.first}<br />#{@player5.last}".html_safe, player_path(@player[-5].id), :class => "link" %></li>
      <li class='score'> Current Score: <%= ((@player[-5].current_mentions/(@totalmentions.last.total_mentions+1).to_f)*1000).round(2) %></li>
   <ul>
  </div>
<div class="pure-u-4-5">
  <section id='newart'>
    <h1 id='charthead'> MOST POPULAR </h1>
    <div class='charts'> 
      <%=render 'chartuno' %>
    </div>
  </section>
  <section id='newart1'>
    <h1 id='charthead'> RISING POPULARITY </h1>
    <div class='charts'>
    <style> /* set the CSS */

body { font: 12px Arial;}

path { 
    stroke: steelblue;
    stroke-width: 2;
    fill: none;
}

.axis path,
.axis line {
    fill: none;
    stroke: yellow;
    stroke-width: 1;
    shape-rendering: crispEdges;
}

.legend {
    font-size: 16px;
    font-weight: bold;
    text-anchor: middle;
}

</style>
<body>
 
<!-- load the d3.js library -->    
<script src="http://d3js.org/d3.v3.min.js"></script>
 
<script>



// Set the dimensions of the canvas / graph
var margin = {top: 100, right: 60, bottom: 70, left: 100},
    width = 850 - margin.left - margin.right,
    height = 380 - margin.top - margin.bottom;

// Parse the date / time
var setHour = function(hour) {
    date = new Date();
    date.setHours(hour);
    date.setMinutes(0);
    date.setSeconds(0);
    return date;
}

// Set the ranges
var x = d3.time.scale().range([0, width]);
var y = d3.scale.linear().range([height, 20]);

// Define the axes
var xAxis = d3.svg.axis().scale(x)
    .orient("bottom").ticks(15);

var yAxis = d3.svg.axis().scale(y)
    .orient("left").ticks(10);

// Define the line
var priceline = d3.svg.line()   
    .x(function(d) { return x(d.date); })
    .y(function(d) { return y(d.score); });
    
// Adds the svg canvas
var svg = d3.select(".charts")
    .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
    .append("g")
        .attr("transform", 
              "translate(100, 130)");


 var playerScores = [];


// Get the data
d3.json("api/players/top_five", function(error, data) {
    data.forEach(function(d) {
        d.scores.forEach(function(e){
            e.date = setHour(e.hour);
            e.name = d.name;
            
            playerScores.push(e);
        })
    
      //  d.price = +d.price;
   });
     console.log(playerScores);
     data = playerScores;
    // Scale the range of the data
    x.domain(d3.extent(data, function(d) { return d.date; }));
    y.domain([0, d3.max(data, function(d) { return d.score; })]);

    // Nest the entries by symbol
    var dataNest = d3.nest()
        .key(function(d) {return d.name;})
        .entries(data);

    var color = d3.scale.category10();   // set the colour scale

    legendSpace = width/dataNest.length; // spacing for the legend

    // Loop through each symbol / key
    dataNest.forEach(function(d,i) { 

        svg.append("path")
            .attr("class", "line")
            .style("stroke", function() { // Add the colours dynamically
                return d.color = color(d.key); })
            .attr("id", 'tag'+d.key.replace(/\s+/g, '')) // assign ID
            .attr("d", priceline(d.values));

        // Add the Legend
        svg.append("text")
            .attr("x", (legendSpace/2)+i*legendSpace)  // space legend
            .attr("y", height + (margin.bottom/2)+ 5)
            .attr("class", "legend")    // style the legend
            .style("fill", function() { // Add the colours dynamically
                return d.color = color(d.key); })
            .on("click", function(){
                // Determine if current line is visible 
                var active   = d.active ? false : true,
                newOpacity = active ? 0 : 1; 
                // Hide or show the elements based on the ID
                d3.select("#tag"+d.key.replace(/\s+/g, ''))
                    .transition().duration(100) 
                    .style("opacity", newOpacity); 
                // Update whether or not the elements are active
                d.active = active;
                })  
            .text(d.key); 

    });

    // Add the X Axis
    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis)
        .style("fill", "yellow");

    // Add the Y Axis
    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis)
        .style("fill", "yellow");

});

</script>
</body>
     </div>
  </section>
</div>

</div>