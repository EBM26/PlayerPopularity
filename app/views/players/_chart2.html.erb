
 
<script>



// Set the dimensions of the canvas / graph
var margin = {top: 100, right: 60, bottom: 70, left: 60},
    width = 806 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;

// Parse the date / time
var setHour = function(hour) {
    date = new Date();
    date.setHours(hour);
    date.setMinutes(0);
    date.setSeconds(0);
    return date;
}

// Set the ranges
var x = d3.time.scale().range([0, width]);
var y = d3.scale.linear().range([height, 20]);

// Define the axes
var xAxis = d3.svg.axis().scale(x)
    .orient("bottom").ticks(15);

var yAxis = d3.svg.axis().scale(y)
    .orient("left").ticks(10);

// Define the line
var priceline = d3.svg.line()
    .interpolate("basis")
    .x(function(d) { return x(d.date); })
    .y(function(d) { return y(d.score); });
    
// Adds the svg canvas
var svg = d3.select("#chart2")
    .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
    .append("g")
        .attr("transform", 
              "translate(65, 15)");


 var playerScores = [];


// Get the data
d3.json("api/players/top_five", function(error, data) {
    data.forEach(function(d) {
        d.scores.forEach(function(e){
            e.date = setHour(e.hour);
            e.name = d.name;
            
            playerScores.push(e);
        })
    
      //  d.price = +d.price;
   });
     console.log(playerScores);
     data = playerScores;
    // Scale the range of the data
    x.domain(d3.extent(data, function(d) { return d.date; }));
    y.domain([0, d3.max(data, function(d) { return d.score; })]);

    // Nest the entries by symbol
    var dataNest = d3.nest()
        .key(function(d) {return d.name;})
        .entries(data);

    var color = d3.scale.category10();   // set the colour scale

    legendSpace = width/dataNest.length; // spacing for the legend

    // Loop through each symbol / key
    dataNest.forEach(function(d,i) { 

        svg.append("path")
            .attr("class", "line")
            .style("stroke", function() { // Add the colours dynamically
                return d.color = color(d.key); })
            .attr("id", 'tag'+d.key.replace(/\s+/g, '')) // assign ID
            .attr("d", priceline(d.values));

        // Add the Legend
        svg.append("text")
            .attr("x", (legendSpace/2)+i*legendSpace)  // space legend
            .attr("y", height + (margin.bottom/2)+ 5)
            .attr("class", "legend")    // style the legend
            .style("fill", function() { // Add the colours dynamically
                return d.color = color(d.key); })
            .on("click", function(){
                // Determine if current line is visible 
                var active   = d.active ? false : true,
                newOpacity = active ? 0 : 1; 
                // Hide or show the elements based on the ID
                d3.select("#tag"+d.key.replace(/\s+/g, ''))
                    .transition().duration(100) 
                    .style("opacity", newOpacity); 
                // Update whether or not the elements are active
                d.active = active;
                })  
            .text(d.key); 

    });

    // Add the X Axis
    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis)
        .style("fill", "yellow");

    // Add the Y Axis
    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis)
        .style("fill", "yellow");

});

</script>