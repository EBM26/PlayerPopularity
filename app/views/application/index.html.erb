<table>

  <thead>
    <tr>
      <th> Name </th>
      <th> Twitter</th>
      <th> Score</th>
      <th> Last Hourly Score</th>
    </tr>
  </thead>
  
  <% @player.each do |p| %>
    <tr>
      <td> <%= p.name %> </td>
      <td> <%= p.twitter_handle %> </td>
      <td> <%= p.current_mentions %> </td>
      <%p.hourly_scores.all.each do |x|%>
      <td> <%= x.score %></td>
      <% end %>
    </tr>
  <% end %>

</table>

<style> /* set the CSS */

body { font: 12px Arial;}

path { 
    stroke: steelblue;
    stroke-width: 2;
    fill: none;
}

.axis path,
.axis line {
    fill: none;
    stroke: grey;
    stroke-width: 1;
    shape-rendering: crispEdges;
}

.legend {
    font-size: 16px;
    font-weight: bold;
    text-anchor: middle;
}

</style>
<body>
 
<!-- load the d3.js library -->    
<script src="http://d3js.org/d3.v3.min.js"></script>
 
<script>

// Set the dimensions of the canvas / graph
var margin = {top: 30, right: 20, bottom: 70, left: 50},
    width = 1200 - margin.left - margin.right,
    height = 600 - margin.top - margin.bottom;

// Parse the date / time
var parseDate = d3.time.format("%H").parse;

// Set the ranges
var x = d3.time.scale().range([0, width]);
var y = d3.scale.linear().range([height, 0]);

// Define the axes
var xAxis = d3.svg.axis().scale(x)
    .orient("bottom").ticks(5);

var yAxis = d3.svg.axis().scale(y)
    .orient("left").ticks(5);

// Define the line
var priceline = d3.svg.line()   
    .x(function(d) { console.log("drawing"); return x(d.hour); })
    .y(function(d) { return y(d.score); });
    
// Adds the svg canvas
var svg = d3.select("body")
    .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
    .append("g")
        .attr("transform", 
              "translate(" + margin.left + "," + margin.top + ")");

// Get the data
$.getJSON("/api/players/hourly_scores", function(data) {
    data.forEach(function(d){
      var playername = d.name;
      // d.scores = [];
      // d.hours = [];
      d.scores.forEach(function(e){
        d.name = playername;
        d.score = e.score;
        d.hour = e.hour;
        delete d["scores"];
        console.log(d);
      });
    });
// d3.json("/api/players/hourly_scores", function(error, data) {

    // console.log(data)
    // for(var i in data) {
    //   console.log(data[i]); 
    //   for(var j in data[i].scores) {
    //     console.log(data[i].scores[j].hour);
    //     console.log(data[i].scores[j].score);
    //     data.score = data[i].scores[j].score;
    //     data.hour = data[i].scores[j].hour;
    //   }
    // }

    // data.forEach(function(d){
    //   var playername = d.name;
    //   // d.scores = [];
    //   // d.hours = [];
    //   d.scores.forEach(function(e){
    //     d.name = playername;
    //     d.score = e.score;
    //     d.hour = e.hour;
    //     delete d["scores"];

    //     // console.log(d);
    //   })
    // })

    // data.forEach(function(d) {
    //     d.date = parseDate(d.date);
    //     d.price = +d.price;
    // });

    // Scale the range of the data
    x.domain(d3.extent(data, function(d) { return d.hour; }));
    y.domain([0, d3.max(data, function(d) { return d.score; })]);

    // Nest the entries by name
    var dataNest = d3.nest()
        .key(function(d) { return d.name;})
        .entries(data);

    var color = d3.scale.category10();   // set the colour scale

    legendSpace = width/dataNest.length; // spacing for the legend

    // Loop through each name / key
    dataNest.forEach(function(d,i) { 

        svg.append("path")
            .attr("class", "line")
            .style("stroke", function() { // Add the colours dynamically
                return d.color = color(d.key); })
            .attr("id", 'tag'+d.key.replace(/\s+/g, '')) // assign ID
            .attr("d", priceline(d.values));

        // Add the Legend
        svg.append("text")
            .attr("x", (legendSpace/2)+i*legendSpace)  // space legend
            .attr("y", height + (margin.bottom/2)+ 5)
            .attr("class", "legend")    // style the legend
            .style("fill", function() { // Add the colours dynamically
                return d.color = color(d.key); })
            .on("click", function(){
                // Determine if current line is visible 
                var active   = d.active ? false : true,
                newOpacity = active ? 0 : 1; 
                // Hide or show the elements based on the ID
                d3.select("#tag"+d.key.replace(/\s+/g, ''))
                    .transition().duration(100) 
                    .style("opacity", newOpacity); 
                // Update whether or not the elements are active
                d.active = active;
                })  
            .text(d.key); 

    });

    // Add the X Axis
    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);

    // Add the Y Axis
    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis);

});

</script>
</body>